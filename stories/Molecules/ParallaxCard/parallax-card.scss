@use '../../assets/scss/variables';
@use '../../assets/scss/mixins';
@use '../../assets/scss/breakpoints';

/* parallax card start */
.parallax-card {
  align-items: center;

  &__content {
    >a {
      @extend %img_none;
      @extend %img_none;

      display: block;

      @include breakpoints.devicebreak(small) {
        padding: variables.$spacing-06 0 0 variables.$spacing-06;
      }

      @include breakpoints.devicebreak(medium) {
        padding-right: variables.$spacing-04;
      }

      &:hover {
        .cta__link::after {
          @include mixins.translate(70%, 0);
        }
      }
    }
  }

  &__image {
    img {
      @extend %img-cover;

      display: block;

      @include breakpoints.devicebreak(small) {
        height: 17.875rem;
      }
    }
  }

  .cta__link {
    @extend %img_none;

    @include breakpoints.devicebreak(medium) {
      padding-left: variables.$spacing-06;
    }
  }

  h3 {
    margin-bottom: variables.$spacing-06;

    @include breakpoints.devicebreak(medium) {
      padding-left: variables.$spacing-06;
    }
  }

  p {
    font-size: variables.$font-size-16;
    line-height: 1.4;
    margin-bottom: variables.$spacing-06;
    padding-bottom: variables.$spacing-06;

    @include breakpoints.devicebreak(medium) {
      border-bottom: solid 2px variables.$color-black;
      padding: 0 0 variables.$spacing-06 variables.$spacing-06;
    }
  }

  &.text-left {
    .parallax-card__content {
      order: -1;

      @include breakpoints.devicebreak(medium) {
        >a {
          padding-left: variables.$spacing-04;
          padding-right: 0;
        }

        .cta__link {
          padding-left: 0;
          padding-right: variables.$spacing-06;
        }

        h3 {
          padding-left: 0;
          padding-right: variables.$spacing-06;
        }

        p {
          padding: 0 variables.$spacing-06 variables.$spacing-06 0;
        }
      }
    }
  }

  &.image-right {
    @include breakpoints.devicebreak(medium) {
      flex-direction: row-reverse;

      .cta__link {
        padding-left: 0;
        padding-right: variables.$spacing-06;
      }

      h3 {
        padding-left: 0;
        padding-right: variables.$spacing-06;
      }

      p {
        padding: 0 variables.$spacing-06 variables.$spacing-06 0;
      }

      .parallax-card__content>a {
        padding-left: variables.$spacing-04;
        padding-right: 0;
      }

      &.text-left {
        .parallax-card__content {
          >a {
            padding-left: 0;
            padding-right: variables.$spacing-04;
          }

          .cta__link {
            padding-left: variables.$spacing-06;
            padding-right: 0;
          }

          h3 {
            padding-left: variables.$spacing-06;
            padding-right: 0;
          }

          p {
            padding: 0 0 variables.$spacing-06 variables.$spacing-06;
          }
        }
      }
    }
  }
}

[dir='rtl'] {
  .parallax-card {
    @include breakpoints.devicebreak(medium) {
      h3 {
        padding-left: 0;
        padding-right: variables.$spacing-06;
      }

      p {
        padding: 0 variables.$spacing-06 variables.$spacing-06 0;
      }

      .cta__link {
        padding-right: variables.$spacing-06;
      }

      &.image-right,
      &.text-left {
        .cta__link {
          padding-left: variables.$spacing-06;
          padding-right: 0;
        }

        h3 {
          padding-left: variables.$spacing-06;
          padding-right: 0;
        }

        p {
          padding: 0 0 variables.$spacing-06 variables.$spacing-06;
        }

        .parallax-card__content>a {
          padding-left: 0;
          padding-right: variables.$spacing-04;
        }
      }
    }

    &__content {
      >a {
        @include breakpoints.devicebreak(medium) {
          padding-left: variables.$spacing-04;
          padding-right: 0;
        }

        @include breakpoints.devicebreak(small) {
          padding: variables.$spacing-06 variables.$spacing-06 0 0;
        }

        &:hover {
          .cta__link::after {
            @include mixins.transform(translate(-50%, 0) rotate(180deg));
          }
        }
      }
    }
  }
}

/* parallax card end */